version: '3.8'
services:
  database:
    image: mongo:latest
    network_mode: bridge
    container_name: database
    hostname: database
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
  #  healthcheck:
   #   test: echo 'db.runCommand("ping").ok'| mongo --quiet
    #  interval: 30s
     # timeout: 10s
     # retries: 3
    ports:
      - 27017:27017
    volumes:
      - /home/ubuntu/mongo-data:/data/db

  app:
    build: .
    network_mode: bridge
    container_name: app
    hostname: app
    restart: always
    ports:
      - '3000:3000'
    depends_on:
      - database
   # healthcheck:
    #  test: ["CMD-SHELL", "curl --fail http://localhost:5000/health || exit 1"]
     # interval: 30s
     # timeout: 10s
     # retries: 3

#  autoheal:
 #   restart: always
  #  image: willfarrell/autoheal
   # environment:
    #  - AUTOHEAL_CONTAINER_LABEL=all
   # volumes:
    #  - /var/run/docker.sock:/var/run/docker.sock
      
  
  nginx:
    image: nginx:latest
    network_mode: bridge
    container_name: nginx
    hostname: nginx
    restart: always
    ports:
      - '80:80'
      - '443:443'
   # healthcheck:
    #  test: ["CMD", "curl", "-f", "http://localhost/"]
     # interval: 30s
     # timeout: 10s
     # retries: 3
    volumes:
      - /etc/nginx/conf.d
      - /var/log/nginx
      - /var/www/html:/usr/share/nginx/html
      - /etc/letsencrypt/live/fasnasharaf-api.sr.flipr.ai/fullchain.pem:/etc/letsencrypt/live/fasnasharaf-api.sr.flipr.ai/fullchain.pem
      - /etc/letsencrypt/live/fasnasharaf-api.sr.flipr.ai/privkey.pem:/etc/letsencrypt/live/fasnasharaf-api.sr.flipr.ai/privkey.pem
      - /etc/letsencrypt/live/fasnasharaf-grafana.sr.flipr.ai/fullchain.pem:/etc/letsencrypt/live/fasnasharaf-grafana.sr.flipr.ai/fullchain.pem
      - /etc/letsencrypt/live/fasnasharaf-grafana.sr.flipr.ai/privkey.pem:/etc/letsencrypt/live/fasnasharaf-grafana.sr.flipr.ai/privkey.pem
     # - ./certbot/conf/:/etc/nginx/ssl/

#  certbot:
#    image: certbot/certbot:latest
#    network_mode: bridge
#    container_name: certbot
#    hostname: certbot
#    volumes:
#      - ./certbot/www/:/var/www/certbot/:rw
#      - ./certbot/conf/:/etc/letsencrypt/:rw

  jenkins:
    image: jenkins/jenkins:lts
    network_mode: bridge
    container_name: jenkins
    hostname: jenkins
    privileged: true
    user: root
    ports:
    - "8888:8080"
    - "50000:50000"
    volumes:
    - jenkins_home:/var/jenkins_home
    - /var/run/docker.sock:/var/run/docker.sock
    restart: always

  prometheus:       
    image: prom/prometheus:latest
    network_mode: bridge
    container_name: prometheus
    hostname: prometheus
    ports:
    - 9090:9090
    command:
    - '--config.file=/etc/prometheus/prometheus.yml'
    volumes:
    - ./prometheus.yml:/etc/prometheus/prometheus.yml
   

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    network_mode: bridge
    container_name: cadvisor
    hostname: cadvisor
    ports:
    - 8080:8080
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
#    depends_on:
#    - redis


#  redis:
#    image: redis:latest
#    network_mode: bridge
#    container_name: redis
#    hostname: redis
#    ports:
#    - 6379:6379
  node-exporter:
    image: prom/node-exporter
    network_mode: bridge
    container_name: node-exporter
    hostname: node-exporter
    ports:
    - 9100:9100

  grafana:
    image: grafana/grafana
    network_mode: bridge
    container_name: grafana
    hostname: grafana
    user: "1000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=example
    depends_on:
      - prometheus
    ports:
      - 5000:3000

networks:
  week1:
    driver: bridge

volumes:
  jenkins_home:
